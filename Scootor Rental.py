# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IfNkiPs-gaWH7SJVH8mjEatRQnoGqh2q
"""

from ast import While
from enum import Enum
from datetime import datetime, timedelta
from abc import ABC, abstractmethod
import uuid
import re
import unittest
from unittest.mock import MagicMock

class RentalPeriod(Enum):
  Hr = 1
  Day = 2
  Week = 3

class ScooterModel(Enum):
  STANDARD = 1
  PREMIUM = 2

class IPaymentProcessor(ABC):
  def process_payment(self, amount):
      pass

class DummyPaymentProcessor(IPaymentProcessor):
  def process_payment(self, amount):
      print(f"Processing payment of ${amount:.2f}")
      return True

class Scooter:
  def __init__(self, model: ScooterModel):
      self.id = str(uuid.uuid4())
      self.model = model
      self.is_available = True
      self.ride_count = 0
      self.needs_maintenance = False

  def increment_ride_count(self):
      self.ride_count += 1
      if self.ride_count % 10 == 0:
          self.needs_maintenance = True

  def perform_maintenance(self):
      self.needs_maintenance = False

class RentalTransaction:
  def __init__(self, customer, scooters, rental_period):
      self.id = str(uuid.uuid4())
      self.customer = customer
      self.scooters = scooters
      self.rental_period = rental_period
      self.start_time = datetime.now()
      self.end_time = None
      self.cost = 0

  def end_rental(self):
      self.end_time = datetime.now()
      self.calculate_cost()

  def calculate_cost(self):
      duration = self.end_time - self.start_time
      if self.rental_period == RentalPeriod.Hr:
          hours = duration.total_seconds() / 3600
          self.cost = hours * 5 * len(self.scooters)
      elif self.rental_period == RentalPeriod.Day:
          days = duration.days + (duration.seconds / 86400)
          self.cost = days * 20 * len(self.scooters)
      elif self.rental_period == RentalPeriod.Week:
          weeks = duration.days / 7
          self.cost = weeks * 50 * len(self.scooters)

      if 3 <= len(self.scooters) <= 5:
          self.cost *= 0.7  # 30% discount

class Customer:
  def __init__(self, name):
      if not re.match("^[A-Za-z ]*$", name):
          raise ValueError("Invalid customer name")
      self.id = str(uuid.uuid4())
      self.name = name
      self.active_rental = None
      self.rental_history = []

class ScooterRental:
  def __init__(self):
      self.scooters = []
      self.customers = []
      self.active_rentals = []
      self.completed_rentals = []
      self.payment_processor = DummyPaymentProcessor()
      self.total_revenue = 0

  def add_scooter(self, model: ScooterModel):
      scooter = Scooter(model)
      self.scooters.append(scooter)

  def get_available_scooters(self):
      return [s for s in self.scooters if s.is_available and not s.needs_maintenance]

  def rent_scooters(self, customer, num_scooters, rental_period):
      if customer.active_rental:
          raise ValueError("Customer already has an active rental scooter")

      available_scooters = self.get_available_scooters()
      if len(available_scooters) < num_scooters:
          raise ValueError("Not enough scooters available at this moment, come back later")

      rented_scooters = available_scooters[:num_scooters]
      for scooter in rented_scooters:
          scooter.is_available = False

      rental = RentalTransaction(customer, rented_scooters, rental_period)
      customer.active_rental = rental
      self.active_rentals.append(rental)
      return rental

  def return_scooters(self, customer):
      if not customer.active_rental:
          raise ValueError("Customer has no active rental")

      rental = customer.active_rental
      rental.end_rental()

      for scooter in rental.scooters:
          scooter.is_available = True
          scooter.increment_ride_count()

      if self.payment_processor.process_payment(rental.cost):
          self.total_revenue += rental.cost
          self.completed_rentals.append(rental)
          self.active_rentals.remove(rental)
          customer.rental_history.append(rental)
          customer.active_rental = None
      else:
          raise ValueError("Payment processing failed")

  def generate_report(self):
      print("Scooter Rental System Report")
      print(f"Total scooters: {len(self.scooters)}")
      print(f"Available scooters: {len(self.get_available_scooters())}")
      print(f"Active rentals: {len(self.active_rentals)}")
      print(f"Total revenue: ${self.total_revenue:.2f}")
      print(f"Scooters needing maintenance: {sum(1 for s in self.scooters if s.needs_maintenance)}")

def main():
  rental_system = ScooterRental()

  # Add some scooters
  for _ in range(20):
      rental_system.add_scooter(ScooterModel.STANDARD)
  for _ in range(30):
      rental_system.add_scooter(ScooterModel.PREMIUM)

  while True:
      print("\n1. View available scooters")
      print("2. Rent scooters")
      print("3. Return scooters")
      print("4. View system report")
      print("5. Exit")
      choice = input("Select your preferred choice: ")

      if choice == '1':
          available = rental_system.get_available_scooters()
          print(f"Available scooters: {len(available)}")
          for scooter in available:
              print(f"Scooter ID: {scooter.id}, Model: {scooter.model.name}")

      elif choice == '2':
          customer_name = input("Enter customer name: ")
          while customer_name == '':
            print("Customer name cannot be empty")
            customer_name = input("Enter customer name: ")
          while not re.match("^[A-Za-z ]*$", customer_name):
            print("Customer name cannot contain numbers or special characters.")
            customer_name = input("Please enter a valid name for the customer: ")
          # while customer_name.isnumeric():
          #   print("Customer name cannot be a number.")
          #   customer_name = input("Please enter a valid name for the customer: ")

          customer = Customer(customer_name)
          rental_system.customers.append(customer)

          num_scooters = (input(" How many scooters would you like to rent? "))

          while not re.match("^[0-9]+$", num_scooters):
            print("Number of scooters cannot be a letter.")
            num_scooters = (input(" How many scooters would you like to rent? "))
          num_scooters = int(num_scooters)
          while num_scooters < 1 :
            print("Number of scooters cannot be less than 1")
            num_scooters = int(input(" How many scooters would you like to rent? "))
          period = input("Enter rental period (Hr/Day/Week): ")
          try:
              rental = rental_system.rent_scooters(customer, num_scooters, RentalPeriod[period])     #.upper()])
              print(f"Rental started. Rental ID: {rental.id}")
          except ValueError as e:
              print(f"Error: {e}")

      elif choice == '3':
          customer_name = input(" Please enter the name of the customer: ")
          while customer_name == '':
            print("Customer name cannot be empty")
            customer_name = input(" Please enter the name of the customer: ")
          # while customer_name.isnumeric():
          #   print("Customer name cannot be a number.")
          #   customer_name = input("Please enter a valid name for the customer: ")
          while not re.match("^[A-Za-z ]*$", customer_name):
            print("Customer name cannot contain numbers or special characters.")
            customer_name = input("Please enter a valid name for the customer: ")
          customer = next((c for c in rental_system.customers if c.name == customer_name), None)
          if customer:
              try:
                  rental_system.return_scooters(customer)
                  print("Scooters have been successfully processed for return")
              except ValueError as e:
                  print(f"Error: {e}")
          else:
              print("No customer found matching the criteria")

      elif choice == '4':
          rental_system.generate_report()

      elif choice == '5':
          break

      else:
          print("Selection not recognized. Please choose again")

if __name__ == "__main__":
  main()

import unittest
from unittest.mock import MagicMock
from datetime import datetime, timedelta

class TestScooterRentalSystem(unittest.TestCase):

    def setUp(self):
        """Set up a basic rental system environment for tests."""
        self.rental_system = ScooterRental()
        self.rental_system.add_scooter(ScooterModel.STANDARD)
        self.rental_system.add_scooter(ScooterModel.PREMIUM)
        self.rental_system.add_scooter(ScooterModel.STANDARD)
        self.rental_system.add_scooter(ScooterModel.PREMIUM)
        self.customer = Customer("Test Customer")
        self.rental_system.customers.append(self.customer)

    def test_discount_application(self):
        """Test if the 30% discount is applied when renting between 3 and 5 scooters."""
        rental = self.rental_system.rent_scooters(self.customer, 4, RentalPeriod.Day)
        rental.start_time = datetime.now() - timedelta(days=1)
        rental.end_rental()
        expected_cost = 4 * 20 * 0.7
        self.assertAlmostEqual(rental.cost, expected_cost, places=2)

    def test_rental_calculations_hourly(self):
        """Test rental cost calculation for hourly rentals."""
        rental = self.rental_system.rent_scooters(self.customer, 2, RentalPeriod.Hr)
        rental.start_time = datetime.now() - timedelta(hours=2)
        rental.end_rental()
        self.assertAlmostEqual(rental.cost, 20, places=2)

    def test_error_handling_rental_more_than_available(self):
      """Test error when trying to rent more scooters than available."""
      self.rental_system.scooters = []
      self.rental_system.add_scooter(ScooterModel.STANDARD)
      available_scooters = self.rental_system.get_available_scooters()
      self.assertEqual(len(available_scooters), 1, "There should be exactly 1 available scooter.")
      with self.assertRaises(ValueError) as context:
          self.rental_system.rent_scooters(self.customer, 3, RentalPeriod.Day)
      self.assertTrue("Not enough scooters available" in str(context.exception))


    def test_error_handling_active_rental(self):
        """Test error when trying to rent while having an active rental."""
        self.rental_system.rent_scooters(self.customer, 1, RentalPeriod.Day)
        with self.assertRaises(ValueError) as context:
            self.rental_system.rent_scooters(self.customer, 1, RentalPeriod.Day)
        self.assertTrue("Customer already has an active rental scooter" in str(context.exception))

    def test_business_rule_enforcement_invalid_name(self):
        """Test error when customer name contains numbers or special characters."""
        with self.assertRaises(ValueError) as context:
            invalid_customer = Customer("Invalid123!")
        self.assertTrue("Invalid customer name" in str(context.exception))

    def test_payment_processing_successful(self):
        """Test if payment is processed correctly."""
        self.rental_system.payment_processor = MagicMock()
        self.rental_system.payment_processor.process_payment.return_value = True
        self.rental_system.rent_scooters(self.customer, 1, RentalPeriod.Day)
        rental = self.customer.active_rental
        rental.start_time = datetime.now() - timedelta(days=1)
        rental.end_rental()
        self.assertTrue(self.rental_system.payment_processor.process_payment(rental.cost))

if __name__ == "__main__":
    unittest.main(argv=['first-arg-is-ignored'], exit=False)

